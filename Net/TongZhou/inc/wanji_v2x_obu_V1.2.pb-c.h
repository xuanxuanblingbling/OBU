/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: wanji_v2x_obu_V1.2.proto */

#ifndef PROTOBUF_C_wanji_5fv2x_5fobu_5fV1_2e2_2eproto__INCLUDED
#define PROTOBUF_C_wanji_5fv2x_5fobu_5fV1_2e2_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _V2xObuBasicInfo V2xObuBasicInfo;
typedef struct _V2xObuState V2xObuState;
typedef struct _V2xSceneWarning V2xSceneWarning;
typedef struct _V2xObuConfig V2xObuConfig;
typedef struct _V2xObuConfigRsp V2xObuConfigRsp;
typedef struct _V2xObuStatistics V2xObuStatistics;
typedef struct _V2xObuRunningStatus V2xObuRunningStatus;


/* --- enums --- */

/*
 *驾驶状态
 */
typedef enum _DriveStatus {
  DRIVE_STATUS__DriveStatusUNKNOWN = 0,
  /*
   *自动驾驶
   */
  DRIVE_STATUS__DriveStatusAuto = 1,
  /*
   *手动驾驶
   */
  DRIVE_STATUS__DriveStatusManual = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DRIVE_STATUS)
} DriveStatus;
/*
 * 近场支付
 */
typedef enum _VNFPEventType {
  /*
   *畅通
   */
  VNFPEVENT_TYPE__VNFPNoneEvent = 0,
  /*
   *车辆进场
   */
  VNFPEVENT_TYPE__VNFPVehicleAproach = 1,
  /*
   *车辆出场
   */
  VNFPEVENT_TYPE__VNFPVehicleExit = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(VNFPEVENT_TYPE)
} VNFPEventType;
/*
 * 前方拥堵预警,TJW
 */
typedef enum _TrafficJamWarningLevel {
  /*
   *畅通
   */
  TRAFFIC_JAM_WARNING_LEVEL__NoTrafficJam = 0,
  /*
   *基本畅通
   */
  TRAFFIC_JAM_WARNING_LEVEL__BasicNoTrafficJam = 1,
  /*
   *轻度拥堵
   */
  TRAFFIC_JAM_WARNING_LEVEL__LightTrafficJam = 2,
  /*
   *中度拥堵
   */
  TRAFFIC_JAM_WARNING_LEVEL__ModerateTrafficJam = 3,
  /*
   *重度拥堵
   */
  TRAFFIC_JAM_WARNING_LEVEL__SeriousTrafficJam = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TRAFFIC_JAM_WARNING_LEVEL)
} TrafficJamWarningLevel;
/*
 * 车内标牌IVS: In-Vehicle Signage
 */
typedef enum _InVehicleSignageType {
  /*
   *无标牌事件
   */
  IN_VEHICLE_SIGNAGE_TYPE__NoneInvehicleSign = 0,
  /*
   *交叉路口标牌
   */
  IN_VEHICLE_SIGNAGE_TYPE__CrossRoads = 1,
  /*
   *急转弯
   */
  IN_VEHICLE_SIGNAGE_TYPE__SharpTurn = 2,
  /*
   *反向弯路
   */
  IN_VEHICLE_SIGNAGE_TYPE__ReverseDetour = 3,
  /*
   *注意行人
   */
  IN_VEHICLE_SIGNAGE_TYPE__CautionPedestrians = 11,
  /*
   *前方落石
   */
  IN_VEHICLE_SIGNAGE_TYPE__Rockfall = 15,
  /*
   *易滑
   */
  IN_VEHICLE_SIGNAGE_TYPE__Slippy = 17,
  /*
   *隧道
   */
  IN_VEHICLE_SIGNAGE_TYPE__Tunnel = 21,
  /*
   *道路危险
   */
  IN_VEHICLE_SIGNAGE_TYPE__Danger = 37,
  /*
   *前方施工
   */
  IN_VEHICLE_SIGNAGE_TYPE__UnderConstruction = 38,
  /*
   *智能网联测试路标牌
   */
  IN_VEHICLE_SIGNAGE_TYPE__ITSTestRoad = 2001
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(IN_VEHICLE_SIGNAGE_TYPE)
} InVehicleSignageType;
/*
 *HV类型
 */
typedef enum _TargetType {
  /*
   * 未定义，如果目标未识别，定位为0
   */
  TARGET_TYPE__TargetTypeUNKNOWN = 0,
  /*
   * 机动车
   */
  TARGET_TYPE__TargetTypeMOTOR = 1,
  /*
   * 非机动车
   */
  TARGET_TYPE__TargetTypeNON_MOTOR = 2,
  /*
   * 行人
   */
  TARGET_TYPE__TargetTypePEDESTRIAN = 3,
  /*
   * 交通灯
   */
  TARGET_TYPE__TargetTypeRSU = 4,
  /*
   * 卡车
   */
  TARGET_TYPE__TargetTypeTRUCK = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TARGET_TYPE)
} TargetType;
typedef enum _WarningType {
  WARNING_TYPE__WarningTypeNone = 0,
  WARNING_TYPE__WarningTypeV2V = 101,
  WARNING_TYPE__WarningTypeSPAT = 102,
  WARNING_TYPE__WarningTypeRTES = 103,
  WARNING_TYPE__WarningTypeRTSS = 104
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(WARNING_TYPE)
} WarningType;
/*
 *FrameType的类型
 */
typedef enum _ObuSendFrameType {
  OBU_SEND_FRAME_TYPE__ObuSendUnknownType = 0,
  /*
   * OBU基本实时状态
   */
  OBU_SEND_FRAME_TYPE__ObuSendBasicState = 1,
  /*
   * OBU统计信息
   */
  OBU_SEND_FRAME_TYPE__ObuSendStatistics = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OBU_SEND_FRAME_TYPE)
} ObuSendFrameType;

/* --- messages --- */

/*
 * OBU静态信息
 * 上线时上报一次
 */
struct  _V2xObuBasicInfo
{
  ProtobufCMessage base;
  /*
   * UTC时间戳，毫秒
   */
  int64_t timestamp;
  /*
   * 上报序列号
   */
  uint32_t sequence;
  /*
   * 固件版本
   */
  char *firmwareversion;
  /*
   * 应用程序版本
   */
  char *appversion;
  /*
   * 车牌号
   */
  char *platenum;
  /*
   * 设备SN
   */
  char *devicesn;
  /*
   * 车辆类型：参考《车辆类型表》1:特殊车辆; 10:普通轿车; 60:紧急车辆; BRT:52; 快速公交:53; 本地公交:54; 校车:55
   */
  int32_t vehicletype;
};
#define V2X_OBU_BASIC_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v2x_obu_basic_info__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


/*
 * OBU实时状态，每秒一次
 */
struct  _V2xObuState
{
  ProtobufCMessage base;
  /*
   * UTC时间戳，毫秒
   */
  int64_t timestamp;
  /*
   * 上报序列号
   */
  uint32_t sequence;
  /*
   * V2X车辆ID
   */
  char *id;
  /*
   * degree
   */
  double latitude;
  /*
   * degree
   */
  double longitude;
  /*
   * m
   */
  float elevation;
  /*
   * degree 车辆方向角
   */
  float heading;
  /*
   * m/s
   */
  float speed;
  /*
   * 车辆类型,如上
   */
  int32_t vehicletype;
  /*
   * 车辆所属车道ID
   */
  int32_t laneid;
  /*
   * 车辆所在地图本地节点ID
   */
  int32_t nodeid;
  /*
   * 自动驾驶状态：1：自动驾驶; 2:手动驾驶
   */
  int32_t autopilotstate;
  /*
   * 故障状态。0:无故障；1:有故障
   */
  int32_t faultstate;
  /*
   * gnss工作状态 0:无效(默认);1:单点定位(E1);2:差分定位(E2);4:差分定位固定解(E4);5:差分定位浮点解(E5)
   */
  int32_t gnssstatus;
  /*
   * 目标尺寸-长，单位：厘米
   */
  int32_t length;
  /*
   * 目标尺寸-宽，单位：厘米
   */
  int32_t width;
  /*
   * 目标尺寸-高，单位：厘米
   */
  int32_t height;
};
#define V2X_OBU_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v2x_obu_state__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _V2xSceneWarning
{
  ProtobufCMessage base;
  /*
   * UTC时间戳，毫秒
   */
  int64_t timestamp;
  /*
   * 上报序列号
   */
  uint32_t sequence;
  /*
   *本车状态信息
   */
  /*
   * 本车消息ID
   */
  char *id;
  /*
   * OBU设备序列号
   */
  char *devicesn;
  /*
   * 本车纬度
   */
  double hvlatitude;
  /*
   * 本车经度
   */
  double hvlongitude;
  /*
   * 本车海拔
   */
  double hvelevation;
  /*
   * 车头朝向(0°~360°)，正北为 0，顺时针旋转的角度
   */
  double hvheading;
  /*
   * 本车速度m/s
   */
  double hvspeed;
  /*
   * 手动驾驶或者自动驾驶状态
   */
  DriveStatus drivestatus;
  /*
   *事件预警类型、子类型、优先级等
   */
  /*
   * 101：V2V事件，102：红绿灯事件，103：交通事件，104：交通标识
   */
  WarningType type;
  /*
   * 参考V2X事件标识标定说明
   */
  int32_t subtype;
  /*
   * 优先级 0-7 ，数字越小，优先级越高
   */
  int32_t priority;
  /*
   * V2I事件时生效 RSU ID
   */
  char *rsudeviceid;
  /*
   *V2V 事件与感知事件预警子事件
   */
  /*
   * V2X事件参与者设备ID, 远车车辆 BSM消息 ID或者 目标监测ID
   */
  char *rvobjectid;
  TargetType targettype;
  /*
   * 预警事件类型为V2V时生效
   */
  int32_t vehclass;
  /*
   * 预警事件类型为V2V时生效
   */
  char *platenum;
  /*
   * 远车为感知事件识别的物体时生效
   */
  int32_t trackid;
  /*
   * V2X事件参与者纬度 V2V事件时为远车位置信息 V2I事件时为RSU位置信息
   */
  double rvlatitude;
  /*
   * V2X事件参与者经度 V2V事件时为远车位置信息 V2I事件时为RSU位置信息
   */
  double rvlongitude;
  /*
   * V2X事件参与者海拔 V2V事件时为远车位置信息 V2I事件时为RSU位置信息
   */
  double rvelevation;
  /*
   * V2X事件参与者角度 V2V事件时为远车位置信息 V2I事件时为RSU位置信息
   */
  double rvheading;
  /*
   * V2X事件参与者速度m/s V2V事件时为远车位置信息 V2I事件时为RSU位置信息
   */
  double rvspeed;
  /*
   * 到碰撞点距离m
   */
  double disttocollision;
  /*
   * 预测碰撞时间s
   */
  double timetocollision;
  /*
   *限速预警子事件
   */
  /*
   * m/s 限速车速上限
   */
  float maxlimitedspeed;
  /*
   * m/s 限速车速下限
   */
  float minlimitedspeed;
  /*
   *近场支付子事件
   */
  /*
   * 近场支付子事件
   */
  VNFPEventType vnfptype;
  /*
   * 在场内时间，单位分钟
   */
  int32_t onsitetime;
  /*
   * 每小时单价
   */
  float unitpriceofhour;
  /*
   * 总费用，元
   */
  float totalcost;
  /*
   *闯红灯事件补充 (目前云控只需要phaseId)
   */
  /*
   * 区域号
   */
  int32_t regionid;
  /*
   * 路口号; 区域号路口号用于唯一标识信号机身份
   */
  int32_t intersectionid;
  /*
   * 红绿灯相位ID
   */
  int32_t phaseid;
  /*
   * 转向角度,度; 左转:dir>180&&(dir<315); 右转:dir>45&&dir<=180; 直行:其它角度; 调头:-180
   */
  float turnangle;
  /*
   * 灯色状态 1:绿色; 2:红色; 3:黄色
   */
  int32_t lightstate;
  /*
   * 剩余时间 单位秒
   */
  int32_t timeleft;
  /*
   * 绿波车速引导上限 
   */
  float speedguideceil;
  /*
   * 绿波车速引导下限
   */
  float speedguidefloor;
  /*
   *前方拥堵预警补充
   */
  /*
   * 拥堵等级
   */
  TrafficJamWarningLevel level;
  /*
   * 拥堵起点经度(靠近车辆行驶方向),degree
   */
  double startlatitude;
  /*
   * 拥堵起点纬度(靠近车辆行驶方向),degree
   */
  double startlongitude;
  /*
   * 拥堵终点经度,degree
   */
  double endlatitude;
  /*
   * 拥堵终点维度,degree
   */
  double endlongitude;
  /*
   * 车辆到拥堵起点的距离
   */
  float distanceleft;
  /*
   * 车内标牌类型
   */
  InVehicleSignageType ivstype;
  /*
   *道路危险与交通标志预警
   */
  /*
   * RSI事件描述信息
   */
  char *description;
  /*
   *预留信息
   */
  double reserved1;
  double reserved2;
  double reserved3;
};
#define V2X_SCENE_WARNING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v2x_scene_warning__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, DRIVE_STATUS__DriveStatusUNKNOWN, WARNING_TYPE__WarningTypeNone, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, TARGET_TYPE__TargetTypeUNKNOWN, 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, VNFPEVENT_TYPE__VNFPNoneEvent, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, TRAFFIC_JAM_WARNING_LEVEL__NoTrafficJam, 0, 0, 0, 0, 0, IN_VEHICLE_SIGNAGE_TYPE__NoneInvehicleSign, (char *)protobuf_c_empty_string, 0, 0, 0 }


/*
 *云端下发和查询配置
 */
struct  _V2xObuConfig
{
  ProtobufCMessage base;
  /*
   * 唯一的序列号，用于区分响应
   */
  uint32_t sequence;
  /*
   * UTC时间戳，毫秒
   */
  int64_t timestamp;
  /*
   * 1.下发配置，2.查询配置
   */
  int32_t type;
  /*
   * 下发配置内容 例如：{"server.conf":{"NLCenterAdd":"data.nebula- link.com","NLCenterPort":8883}} {"upload.conf":[{"FrameType":1,"periodInterval": 2}]}
   */
  char *configcontext;
};
#define V2X_OBU_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v2x_obu_config__descriptor) \
    , 0, 0, 0, (char *)protobuf_c_empty_string }


/*
 *设置和查询配置的响应
 */
struct  _V2xObuConfigRsp
{
  ProtobufCMessage base;
  /*
   *唯一的序列号，用于区分响应
   */
  uint32_t sequence;
  /*
   * UTC时间戳，毫秒
   */
  int64_t timestamp;
  /*
   *确认请求的顺序
   */
  uint32_t ack;
  /*
   * 1. 配置回复，2.查询回复
   */
  int32_t type;
  /*
   * 1.执行失败  2.执行成功 
   */
  int32_t result;
  /*
   * 查询回复有此字段，例如{”server.conf”:{"NLCenterAdd":"data.nebula- link.com"}}
   */
  char *rspcontent;
};
#define V2X_OBU_CONFIG_RSP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v2x_obu_config_rsp__descriptor) \
    , 0, 0, 0, 0, 0, (char *)protobuf_c_empty_string }


/*
 *OBU统计信息周期上报，目前实现上是针对所有的包数
 */
struct  _V2xObuStatistics
{
  ProtobufCMessage base;
  /*
   * UTC时间戳，毫秒
   */
  int64_t timestamp;
  /*
   *唯一的序列号，用于区分响应
   */
  uint32_t sequence;
  /*
   *发送的总的字节数   //uint32
   */
  uint32_t sendtotalbyte;
  /*
   *发送的总包数   
   */
  uint32_t sendtotalpak;
  /*
   *发送成功的字节数
   */
  uint32_t sendsuccessbyte;
  /*
   *发送成功的包数
   */
  uint32_t sengsuccesspak;
  /*
   *收到数据总字节数
   */
  uint32_t recvtotalbyte;
  /*
   *收到总包数
   */
  uint32_t recvtotalpak;
  /*
   *成功收到的数据字节数
   */
  uint32_t recvsuccessbyte;
  /*
   *成功收到的总包数
   */
  uint32_t recvsuccesspak;
};
#define V2X_OBU_STATISTICS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v2x_obu_statistics__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  _V2xObuRunningStatus
{
  ProtobufCMessage base;
  /*
   * 上报序列号
   */
  uint32_t sequence;
  /*
   * UTC时间戳，毫秒
   */
  int64_t timestamp;
  /*
   * V2X车辆ID
   */
  char *ueid;
  /*
   * gnss工作状态 0:无效(默认);1:单点定位(E1);2:差分定位(E2);4:差分定位固定解(E4);5:差分定位浮点解(E5)
   */
  int32_t gnssstatus;
  /*
   *设备温度 单位：摄氏度
   */
  char *obutemp;
  /*
   *CPU占用率 单位%
   */
  char *cpuusage;
  /*
   *内存占有率 单位%
   */
  char *memusage;
  /*
   *磁盘占用率 单位%
   */
  char *diskusage;
  /*
   *V2X 运行状态，0-正常，1-异常
   */
  int32_t v2xstate;
  /*
   *4G 运行状态，0-异常，1-异常
   */
  int32_t state4g;
};
#define V2X_OBU_RUNNING_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&v2x_obu_running_status__descriptor) \
    , 0, 0, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


/* V2xObuBasicInfo methods */
void   v2x_obu_basic_info__init
                     (V2xObuBasicInfo         *message);
size_t v2x_obu_basic_info__get_packed_size
                     (const V2xObuBasicInfo   *message);
size_t v2x_obu_basic_info__pack
                     (const V2xObuBasicInfo   *message,
                      uint8_t             *out);
size_t v2x_obu_basic_info__pack_to_buffer
                     (const V2xObuBasicInfo   *message,
                      ProtobufCBuffer     *buffer);
V2xObuBasicInfo *
       v2x_obu_basic_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v2x_obu_basic_info__free_unpacked
                     (V2xObuBasicInfo *message,
                      ProtobufCAllocator *allocator);
/* V2xObuState methods */
void   v2x_obu_state__init
                     (V2xObuState         *message);
size_t v2x_obu_state__get_packed_size
                     (const V2xObuState   *message);
size_t v2x_obu_state__pack
                     (const V2xObuState   *message,
                      uint8_t             *out);
size_t v2x_obu_state__pack_to_buffer
                     (const V2xObuState   *message,
                      ProtobufCBuffer     *buffer);
V2xObuState *
       v2x_obu_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v2x_obu_state__free_unpacked
                     (V2xObuState *message,
                      ProtobufCAllocator *allocator);
/* V2xSceneWarning methods */
void   v2x_scene_warning__init
                     (V2xSceneWarning         *message);
size_t v2x_scene_warning__get_packed_size
                     (const V2xSceneWarning   *message);
size_t v2x_scene_warning__pack
                     (const V2xSceneWarning   *message,
                      uint8_t             *out);
size_t v2x_scene_warning__pack_to_buffer
                     (const V2xSceneWarning   *message,
                      ProtobufCBuffer     *buffer);
V2xSceneWarning *
       v2x_scene_warning__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v2x_scene_warning__free_unpacked
                     (V2xSceneWarning *message,
                      ProtobufCAllocator *allocator);
/* V2xObuConfig methods */
void   v2x_obu_config__init
                     (V2xObuConfig         *message);
size_t v2x_obu_config__get_packed_size
                     (const V2xObuConfig   *message);
size_t v2x_obu_config__pack
                     (const V2xObuConfig   *message,
                      uint8_t             *out);
size_t v2x_obu_config__pack_to_buffer
                     (const V2xObuConfig   *message,
                      ProtobufCBuffer     *buffer);
V2xObuConfig *
       v2x_obu_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v2x_obu_config__free_unpacked
                     (V2xObuConfig *message,
                      ProtobufCAllocator *allocator);
/* V2xObuConfigRsp methods */
void   v2x_obu_config_rsp__init
                     (V2xObuConfigRsp         *message);
size_t v2x_obu_config_rsp__get_packed_size
                     (const V2xObuConfigRsp   *message);
size_t v2x_obu_config_rsp__pack
                     (const V2xObuConfigRsp   *message,
                      uint8_t             *out);
size_t v2x_obu_config_rsp__pack_to_buffer
                     (const V2xObuConfigRsp   *message,
                      ProtobufCBuffer     *buffer);
V2xObuConfigRsp *
       v2x_obu_config_rsp__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v2x_obu_config_rsp__free_unpacked
                     (V2xObuConfigRsp *message,
                      ProtobufCAllocator *allocator);
/* V2xObuStatistics methods */
void   v2x_obu_statistics__init
                     (V2xObuStatistics         *message);
size_t v2x_obu_statistics__get_packed_size
                     (const V2xObuStatistics   *message);
size_t v2x_obu_statistics__pack
                     (const V2xObuStatistics   *message,
                      uint8_t             *out);
size_t v2x_obu_statistics__pack_to_buffer
                     (const V2xObuStatistics   *message,
                      ProtobufCBuffer     *buffer);
V2xObuStatistics *
       v2x_obu_statistics__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v2x_obu_statistics__free_unpacked
                     (V2xObuStatistics *message,
                      ProtobufCAllocator *allocator);
/* V2xObuRunningStatus methods */
void   v2x_obu_running_status__init
                     (V2xObuRunningStatus         *message);
size_t v2x_obu_running_status__get_packed_size
                     (const V2xObuRunningStatus   *message);
size_t v2x_obu_running_status__pack
                     (const V2xObuRunningStatus   *message,
                      uint8_t             *out);
size_t v2x_obu_running_status__pack_to_buffer
                     (const V2xObuRunningStatus   *message,
                      ProtobufCBuffer     *buffer);
V2xObuRunningStatus *
       v2x_obu_running_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   v2x_obu_running_status__free_unpacked
                     (V2xObuRunningStatus *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*V2xObuBasicInfo_Closure)
                 (const V2xObuBasicInfo *message,
                  void *closure_data);
typedef void (*V2xObuState_Closure)
                 (const V2xObuState *message,
                  void *closure_data);
typedef void (*V2xSceneWarning_Closure)
                 (const V2xSceneWarning *message,
                  void *closure_data);
typedef void (*V2xObuConfig_Closure)
                 (const V2xObuConfig *message,
                  void *closure_data);
typedef void (*V2xObuConfigRsp_Closure)
                 (const V2xObuConfigRsp *message,
                  void *closure_data);
typedef void (*V2xObuStatistics_Closure)
                 (const V2xObuStatistics *message,
                  void *closure_data);
typedef void (*V2xObuRunningStatus_Closure)
                 (const V2xObuRunningStatus *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    drive_status__descriptor;
extern const ProtobufCEnumDescriptor    vnfpevent_type__descriptor;
extern const ProtobufCEnumDescriptor    traffic_jam_warning_level__descriptor;
extern const ProtobufCEnumDescriptor    in_vehicle_signage_type__descriptor;
extern const ProtobufCEnumDescriptor    target_type__descriptor;
extern const ProtobufCEnumDescriptor    warning_type__descriptor;
extern const ProtobufCEnumDescriptor    obu_send_frame_type__descriptor;
extern const ProtobufCMessageDescriptor v2x_obu_basic_info__descriptor;
extern const ProtobufCMessageDescriptor v2x_obu_state__descriptor;
extern const ProtobufCMessageDescriptor v2x_scene_warning__descriptor;
extern const ProtobufCMessageDescriptor v2x_obu_config__descriptor;
extern const ProtobufCMessageDescriptor v2x_obu_config_rsp__descriptor;
extern const ProtobufCMessageDescriptor v2x_obu_statistics__descriptor;
extern const ProtobufCMessageDescriptor v2x_obu_running_status__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_wanji_5fv2x_5fobu_5fV1_2e2_2eproto__INCLUDED */
